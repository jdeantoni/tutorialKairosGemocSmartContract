/*
 * generated by Xtext 2.24.0
 */
package fr.inria.kairos.tuto.simplelanguage.xtext.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import fr.inria.kairos.tuto.simplelanguage.xtext.ide.contentassist.antlr.internal.InternalSmartContractMLParser;
import fr.inria.kairos.tuto.simplelanguage.xtext.services.SmartContractMLGrammarAccess;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class SmartContractMLParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(SmartContractMLGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, SmartContractMLGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getEStringAccess().getAlternatives(), "rule__EString__Alternatives");
			builder.put(grammarAccess.getSmartContractAccess().getGroup(), "rule__SmartContract__Group__0");
			builder.put(grammarAccess.getSmartContractAccess().getGroup_3(), "rule__SmartContract__Group_3__0");
			builder.put(grammarAccess.getEventAccess().getGroup(), "rule__Event__Group__0");
			builder.put(grammarAccess.getStateAccess().getGroup(), "rule__State__Group__0");
			builder.put(grammarAccess.getStateAccess().getGroup_3(), "rule__State__Group_3__0");
			builder.put(grammarAccess.getFunctionAccess().getGroup(), "rule__Function__Group__0");
			builder.put(grammarAccess.getFunctionAccess().getGroup_5(), "rule__Function__Group_5__0");
			builder.put(grammarAccess.getIntegerVariableAccess().getGroup(), "rule__IntegerVariable__Group__0");
			builder.put(grammarAccess.getIntegerVariableAccess().getGroup_3(), "rule__IntegerVariable__Group_3__0");
			builder.put(grammarAccess.getEIntAccess().getGroup(), "rule__EInt__Group__0");
			builder.put(grammarAccess.getSmartContractAccess().getNameAssignment_2(), "rule__SmartContract__NameAssignment_2");
			builder.put(grammarAccess.getSmartContractAccess().getInitialStateAssignment_3_1(), "rule__SmartContract__InitialStateAssignment_3_1");
			builder.put(grammarAccess.getSmartContractAccess().getOwnedEventsAssignment_4(), "rule__SmartContract__OwnedEventsAssignment_4");
			builder.put(grammarAccess.getSmartContractAccess().getOwnedStatesAssignment_5(), "rule__SmartContract__OwnedStatesAssignment_5");
			builder.put(grammarAccess.getSmartContractAccess().getOwnedFunctionsAssignment_6(), "rule__SmartContract__OwnedFunctionsAssignment_6");
			builder.put(grammarAccess.getEventAccess().getNameAssignment_2(), "rule__Event__NameAssignment_2");
			builder.put(grammarAccess.getEventAccess().getSourceStateAssignment_4(), "rule__Event__SourceStateAssignment_4");
			builder.put(grammarAccess.getEventAccess().getTargetStateAssignment_6(), "rule__Event__TargetStateAssignment_6");
			builder.put(grammarAccess.getStateAccess().getNameAssignment_2(), "rule__State__NameAssignment_2");
			builder.put(grammarAccess.getStateAccess().getOwnedVariablesAssignment_3_2(), "rule__State__OwnedVariablesAssignment_3_2");
			builder.put(grammarAccess.getStateAccess().getOwnedVariablesAssignment_4(), "rule__State__OwnedVariablesAssignment_4");
			builder.put(grammarAccess.getFunctionAccess().getNameAssignment_2(), "rule__Function__NameAssignment_2");
			builder.put(grammarAccess.getFunctionAccess().getEventAssignment_5_1(), "rule__Function__EventAssignment_5_1");
			builder.put(grammarAccess.getIntegerVariableAccess().getNameAssignment_2(), "rule__IntegerVariable__NameAssignment_2");
			builder.put(grammarAccess.getIntegerVariableAccess().getInitialValueAssignment_3_1(), "rule__IntegerVariable__InitialValueAssignment_3_1");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private SmartContractMLGrammarAccess grammarAccess;

	@Override
	protected InternalSmartContractMLParser createParser() {
		InternalSmartContractMLParser result = new InternalSmartContractMLParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public SmartContractMLGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(SmartContractMLGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
