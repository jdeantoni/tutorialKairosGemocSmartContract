/*
 * generated by Xtext 2.24.0
 */
grammar InternalSmartContractML;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package fr.inria.kairos.tuto.simplelanguage.xtext.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package fr.inria.kairos.tuto.simplelanguage.xtext.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import fr.inria.kairos.tuto.simplelanguage.xtext.services.SmartContractMLGrammarAccess;

}

@parser::members {

 	private SmartContractMLGrammarAccess grammarAccess;

    public InternalSmartContractMLParser(TokenStream input, SmartContractMLGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "SmartContract";
   	}

   	@Override
   	protected SmartContractMLGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleSmartContract
entryRuleSmartContract returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSmartContractRule()); }
	iv_ruleSmartContract=ruleSmartContract
	{ $current=$iv_ruleSmartContract.current; }
	EOF;

// Rule SmartContract
ruleSmartContract returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getSmartContractAccess().getSmartContractAction_0(),
					$current);
			}
		)
		otherlv_1='SmartContract'
		{
			newLeafNode(otherlv_1, grammarAccess.getSmartContractAccess().getSmartContractKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSmartContractAccess().getNameEStringParserRuleCall_2_0());
				}
				lv_name_2_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSmartContractRule());
					}
					set(
						$current,
						"name",
						lv_name_2_0,
						"fr.inria.kairos.tuto.simplelanguage.xtext.SmartContractML.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_3='->'
			{
				newLeafNode(otherlv_3, grammarAccess.getSmartContractAccess().getHyphenMinusGreaterThanSignKeyword_3_0());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getSmartContractRule());
						}
					}
					{
						newCompositeNode(grammarAccess.getSmartContractAccess().getInitialStateStateCrossReference_3_1_0());
					}
					ruleEString
					{
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getSmartContractAccess().getOwnedEventsEventParserRuleCall_4_0());
				}
				lv_ownedEvents_5_0=ruleEvent
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSmartContractRule());
					}
					add(
						$current,
						"ownedEvents",
						lv_ownedEvents_5_0,
						"fr.inria.kairos.tuto.simplelanguage.xtext.SmartContractML.Event");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			(
				{
					newCompositeNode(grammarAccess.getSmartContractAccess().getOwnedStatesStateParserRuleCall_5_0());
				}
				lv_ownedStates_6_0=ruleState
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSmartContractRule());
					}
					add(
						$current,
						"ownedStates",
						lv_ownedStates_6_0,
						"fr.inria.kairos.tuto.simplelanguage.xtext.SmartContractML.State");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			(
				{
					newCompositeNode(grammarAccess.getSmartContractAccess().getOwnedFunctionsFunctionParserRuleCall_6_0());
				}
				lv_ownedFunctions_7_0=ruleFunction
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSmartContractRule());
					}
					add(
						$current,
						"ownedFunctions",
						lv_ownedFunctions_7_0,
						"fr.inria.kairos.tuto.simplelanguage.xtext.SmartContractML.Function");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleVariable
entryRuleVariable returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVariableRule()); }
	iv_ruleVariable=ruleVariable
	{ $current=$iv_ruleVariable.current; }
	EOF;

// Rule Variable
ruleVariable returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		newCompositeNode(grammarAccess.getVariableAccess().getIntegerVariableParserRuleCall());
	}
	this_IntegerVariable_0=ruleIntegerVariable
	{
		$current = $this_IntegerVariable_0.current;
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRuleEString
entryRuleEString returns [String current=null]:
	{ newCompositeNode(grammarAccess.getEStringRule()); }
	iv_ruleEString=ruleEString
	{ $current=$iv_ruleEString.current.getText(); }
	EOF;

// Rule EString
ruleEString returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_STRING_0=RULE_STRING
		{
			$current.merge(this_STRING_0);
		}
		{
			newLeafNode(this_STRING_0, grammarAccess.getEStringAccess().getSTRINGTerminalRuleCall_0());
		}
		    |
		this_ID_1=RULE_ID
		{
			$current.merge(this_ID_1);
		}
		{
			newLeafNode(this_ID_1, grammarAccess.getEStringAccess().getIDTerminalRuleCall_1());
		}
	)
;

// Entry rule entryRuleEvent
entryRuleEvent returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEventRule()); }
	iv_ruleEvent=ruleEvent
	{ $current=$iv_ruleEvent.current; }
	EOF;

// Rule Event
ruleEvent returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getEventAccess().getEventAction_0(),
					$current);
			}
		)
		otherlv_1='Event'
		{
			newLeafNode(otherlv_1, grammarAccess.getEventAccess().getEventKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getEventAccess().getNameEStringParserRuleCall_2_0());
				}
				lv_name_2_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getEventRule());
					}
					set(
						$current,
						"name",
						lv_name_2_0,
						"fr.inria.kairos.tuto.simplelanguage.xtext.SmartContractML.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3='from'
		{
			newLeafNode(otherlv_3, grammarAccess.getEventAccess().getFromKeyword_3());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getEventRule());
					}
				}
				{
					newCompositeNode(grammarAccess.getEventAccess().getSourceStateStateCrossReference_4_0());
				}
				ruleEString
				{
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_5='to'
		{
			newLeafNode(otherlv_5, grammarAccess.getEventAccess().getToKeyword_5());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getEventRule());
					}
				}
				{
					newCompositeNode(grammarAccess.getEventAccess().getTargetStateStateCrossReference_6_0());
				}
				ruleEString
				{
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleState
entryRuleState returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStateRule()); }
	iv_ruleState=ruleState
	{ $current=$iv_ruleState.current; }
	EOF;

// Rule State
ruleState returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getStateAccess().getStateAction_0(),
					$current);
			}
		)
		otherlv_1='State'
		{
			newLeafNode(otherlv_1, grammarAccess.getStateAccess().getStateKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getStateAccess().getNameEStringParserRuleCall_2_0());
				}
				lv_name_2_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getStateRule());
					}
					set(
						$current,
						"name",
						lv_name_2_0,
						"fr.inria.kairos.tuto.simplelanguage.xtext.SmartContractML.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_3='outputEvent'
			{
				newLeafNode(otherlv_3, grammarAccess.getStateAccess().getOutputEventKeyword_3_0());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getStateRule());
						}
					}
					{
						newCompositeNode(grammarAccess.getStateAccess().getOutputEventEventCrossReference_3_1_0());
					}
					ruleEString
					{
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		otherlv_5='var'
		{
			newLeafNode(otherlv_5, grammarAccess.getStateAccess().getVarKeyword_4());
		}
		otherlv_6=':'
		{
			newLeafNode(otherlv_6, grammarAccess.getStateAccess().getColonKeyword_5());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getStateAccess().getOwnedVariablesVariableParserRuleCall_6_0());
				}
				lv_ownedVariables_7_0=ruleVariable
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getStateRule());
					}
					add(
						$current,
						"ownedVariables",
						lv_ownedVariables_7_0,
						"fr.inria.kairos.tuto.simplelanguage.xtext.SmartContractML.Variable");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleFunction
entryRuleFunction returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFunctionRule()); }
	iv_ruleFunction=ruleFunction
	{ $current=$iv_ruleFunction.current; }
	EOF;

// Rule Function
ruleFunction returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getFunctionAccess().getFunctionAction_0(),
					$current);
			}
		)
		otherlv_1='Function'
		{
			newLeafNode(otherlv_1, grammarAccess.getFunctionAccess().getFunctionKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getFunctionAccess().getNameEStringParserRuleCall_2_0());
				}
				lv_name_2_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFunctionRule());
					}
					set(
						$current,
						"name",
						lv_name_2_0,
						"fr.inria.kairos.tuto.simplelanguage.xtext.SmartContractML.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3='('
		{
			newLeafNode(otherlv_3, grammarAccess.getFunctionAccess().getLeftParenthesisKeyword_3());
		}
		otherlv_4=')'
		{
			newLeafNode(otherlv_4, grammarAccess.getFunctionAccess().getRightParenthesisKeyword_4());
		}
		(
			otherlv_5=':'
			{
				newLeafNode(otherlv_5, grammarAccess.getFunctionAccess().getColonKeyword_5_0());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getFunctionRule());
						}
					}
					{
						newCompositeNode(grammarAccess.getFunctionAccess().getEventEventCrossReference_5_1_0());
					}
					ruleEString
					{
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleIntegerVariable
entryRuleIntegerVariable returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIntegerVariableRule()); }
	iv_ruleIntegerVariable=ruleIntegerVariable
	{ $current=$iv_ruleIntegerVariable.current; }
	EOF;

// Rule IntegerVariable
ruleIntegerVariable returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getIntegerVariableAccess().getIntegerVariableAction_0(),
					$current);
			}
		)
		otherlv_1='int'
		{
			newLeafNode(otherlv_1, grammarAccess.getIntegerVariableAccess().getIntKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getIntegerVariableAccess().getNameEStringParserRuleCall_2_0());
				}
				lv_name_2_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getIntegerVariableRule());
					}
					set(
						$current,
						"name",
						lv_name_2_0,
						"fr.inria.kairos.tuto.simplelanguage.xtext.SmartContractML.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_3='='
			{
				newLeafNode(otherlv_3, grammarAccess.getIntegerVariableAccess().getEqualsSignKeyword_3_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getIntegerVariableAccess().getInitialValueEIntParserRuleCall_3_1_0());
					}
					lv_initialValue_4_0=ruleEInt
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getIntegerVariableRule());
						}
						set(
							$current,
							"initialValue",
							lv_initialValue_4_0,
							"fr.inria.kairos.tuto.simplelanguage.xtext.SmartContractML.EInt");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleEInt
entryRuleEInt returns [String current=null]:
	{ newCompositeNode(grammarAccess.getEIntRule()); }
	iv_ruleEInt=ruleEInt
	{ $current=$iv_ruleEInt.current.getText(); }
	EOF;

// Rule EInt
ruleEInt returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			kw='-'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getEIntAccess().getHyphenMinusKeyword_0());
			}
		)?
		this_INT_1=RULE_INT
		{
			$current.merge(this_INT_1);
		}
		{
			newLeafNode(this_INT_1, grammarAccess.getEIntAccess().getINTTerminalRuleCall_1());
		}
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
