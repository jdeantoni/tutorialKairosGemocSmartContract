/*
 * generated by Xtext 2.24.0
 */
package fr.inria.kairos.tuto.simplelanguage.xtext.serializer;

import com.google.inject.Inject;
import fr.inria.kairos.tuto.simplelanguage.Event;
import fr.inria.kairos.tuto.simplelanguage.Function;
import fr.inria.kairos.tuto.simplelanguage.IntegerVariable;
import fr.inria.kairos.tuto.simplelanguage.SimplelanguagePackage;
import fr.inria.kairos.tuto.simplelanguage.SmartContract;
import fr.inria.kairos.tuto.simplelanguage.State;
import fr.inria.kairos.tuto.simplelanguage.xtext.services.SmartContractMLGrammarAccess;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class SmartContractMLSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private SmartContractMLGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == SimplelanguagePackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case SimplelanguagePackage.EVENT:
				sequence_Event(context, (Event) semanticObject); 
				return; 
			case SimplelanguagePackage.FUNCTION:
				sequence_Function(context, (Function) semanticObject); 
				return; 
			case SimplelanguagePackage.INTEGER_VARIABLE:
				sequence_IntegerVariable(context, (IntegerVariable) semanticObject); 
				return; 
			case SimplelanguagePackage.SMART_CONTRACT:
				sequence_SmartContract(context, (SmartContract) semanticObject); 
				return; 
			case SimplelanguagePackage.STATE:
				sequence_State(context, (State) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Event returns Event
	 *
	 * Constraint:
	 *     (name=EString sourceState=[State|EString] targetState=[State|EString])
	 */
	protected void sequence_Event(ISerializationContext context, Event semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SimplelanguagePackage.Literals.NAMED_ELEMENT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SimplelanguagePackage.Literals.NAMED_ELEMENT__NAME));
			if (transientValues.isValueTransient(semanticObject, SimplelanguagePackage.Literals.EVENT__SOURCE_STATE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SimplelanguagePackage.Literals.EVENT__SOURCE_STATE));
			if (transientValues.isValueTransient(semanticObject, SimplelanguagePackage.Literals.EVENT__TARGET_STATE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SimplelanguagePackage.Literals.EVENT__TARGET_STATE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getEventAccess().getNameEStringParserRuleCall_2_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getEventAccess().getSourceStateStateEStringParserRuleCall_4_0_1(), semanticObject.getSourceState());
		feeder.accept(grammarAccess.getEventAccess().getTargetStateStateEStringParserRuleCall_6_0_1(), semanticObject.getTargetState());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Function returns Function
	 *
	 * Constraint:
	 *     (name=EString event=[Event|EString]?)
	 */
	protected void sequence_Function(ISerializationContext context, Function semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Variable returns IntegerVariable
	 *     IntegerVariable returns IntegerVariable
	 *
	 * Constraint:
	 *     (name=EString initialValue=EInt?)
	 */
	protected void sequence_IntegerVariable(ISerializationContext context, IntegerVariable semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SmartContract returns SmartContract
	 *
	 * Constraint:
	 *     (name=EString initialState=[State|EString]? ownedEvents+=Event* ownedStates+=State* ownedFunctions+=Function*)
	 */
	protected void sequence_SmartContract(ISerializationContext context, SmartContract semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     State returns State
	 *
	 * Constraint:
	 *     (name=EString ownedVariables+=Variable? ownedVariables+=Variable*)
	 */
	protected void sequence_State(ISerializationContext context, State semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
