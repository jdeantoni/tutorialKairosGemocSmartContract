/**
 * generated by Xtext 2.24.0
 */
package fr.inria.kairos.tuto.simplelanguage.xtext.formatting2;

import com.google.inject.Inject;
import fr.inria.kairos.tuto.simplelanguage.Event;
import fr.inria.kairos.tuto.simplelanguage.Function;
import fr.inria.kairos.tuto.simplelanguage.SmartContract;
import fr.inria.kairos.tuto.simplelanguage.State;
import fr.inria.kairos.tuto.simplelanguage.Variable;
import fr.inria.kairos.tuto.simplelanguage.xtext.services.SmartContractMLGrammarAccess;
import java.util.Arrays;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.formatting2.AbstractFormatter2;
import org.eclipse.xtext.formatting2.IFormattableDocument;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.xbase.lib.Extension;

@SuppressWarnings("all")
public class SmartContractMLFormatter extends AbstractFormatter2 {
  @Inject
  @Extension
  private SmartContractMLGrammarAccess _smartContractMLGrammarAccess;
  
  protected void _format(final SmartContract smartContract, @Extension final IFormattableDocument document) {
    EList<Event> _ownedEvents = smartContract.getOwnedEvents();
    for (final Event event : _ownedEvents) {
      document.<Event>format(event);
    }
    EList<State> _ownedStates = smartContract.getOwnedStates();
    for (final State state : _ownedStates) {
      document.<State>format(state);
    }
    EList<Function> _ownedFunctions = smartContract.getOwnedFunctions();
    for (final Function function : _ownedFunctions) {
      document.<Function>format(function);
    }
  }
  
  protected void _format(final State state, @Extension final IFormattableDocument document) {
    EList<Variable> _ownedVariables = state.getOwnedVariables();
    for (final Variable variable : _ownedVariables) {
      document.<Variable>format(variable);
    }
  }
  
  public void format(final Object smartContract, final IFormattableDocument document) {
    if (smartContract instanceof XtextResource) {
      _format((XtextResource)smartContract, document);
      return;
    } else if (smartContract instanceof SmartContract) {
      _format((SmartContract)smartContract, document);
      return;
    } else if (smartContract instanceof State) {
      _format((State)smartContract, document);
      return;
    } else if (smartContract instanceof EObject) {
      _format((EObject)smartContract, document);
      return;
    } else if (smartContract == null) {
      _format((Void)null, document);
      return;
    } else if (smartContract != null) {
      _format(smartContract, document);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(smartContract, document).toString());
    }
  }
}
